"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var effects_1 = require("@ngrx/effects");
var Observable_1 = require("rxjs/Observable");
var defer_1 = require("rxjs/observable/defer");
require("rxjs/add/observable/fromPromise");
require("rxjs/add/observable/of");
require("rxjs/add/operator/map");
require("rxjs/add/operator/catch");
var storage_1 = require("@ionic/storage");
var STORAGE_KEY = 'NSIS_APP_STATE';
var storage = new storage_1.Storage({});
// get/setNested inspired by
// https://github.com/mickhansen/dottie.js
function getNested(obj, path) {
    if (obj !== null && path) {
        // Recurse into the object.
        var parts = path.split('.').reverse();
        while (obj != null && parts.length) {
            obj = obj[parts.pop()];
        }
    }
    return obj;
}
function setNested(obj, path, value) {
    if (obj != null && path) {
        var pieces = path.split('.'), current = obj, piece = void 0, i = void 0, length_1 = pieces.length;
        for (i = 0; i < length_1; i++) {
            piece = pieces[i];
            if (i === length_1 - 1) {
                current[piece] = value;
            }
            else if (!current[piece]) {
                current[piece] = {};
            }
            current = current[piece];
        }
    }
    return obj;
}
function fetchState() {
    return storage
        .get(STORAGE_KEY)
        .then(function (s) { return s || {}; })
        .catch(function (err) { });
}
function saveState(state, keys) {
    // Pull out the portion of the state to save.
    if (keys) {
        state = keys.reduce(function (acc, k) {
            var val = getNested(state, k);
            if (val) {
                setNested(acc, k, val);
            }
            return acc;
        }, {});
    }
    return storage.set(STORAGE_KEY, state);
}
;
exports.StorageSyncActions = {
    HYDRATED: 'NSIS_APP_HYDRATED'
};
var StorageSyncEffects = (function () {
    function StorageSyncEffects() {
        this.hydrate$ = defer_1.defer(function () {
            return Observable_1.Observable.fromPromise(fetchState())
                .map(function (state) {
                return ({
                    type: exports.StorageSyncActions.HYDRATED,
                    payload: state
                });
            })
                .catch(function (e) {
                console.warn("error fetching data from store for hydration: " + e);
                return Observable_1.Observable.of({
                    type: exports.StorageSyncActions.HYDRATED,
                    payload: {}
                });
            });
        });
    }
    StorageSyncEffects.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    StorageSyncEffects.ctorParameters = function () { return []; };
    __decorate([
        effects_1.Effect(),
        __metadata("design:type", Observable_1.Observable)
    ], StorageSyncEffects.prototype, "hydrate$", void 0);
    return StorageSyncEffects;
}());
exports.StorageSyncEffects = StorageSyncEffects;
;
var ɵ0 = function (err) { };
exports.ɵ0 = ɵ0;
var defaultOptions = {
    keys: [],
    ignoreActions: [],
    onSyncError: ɵ0
};
function storageSync(options) {
    var _a = Object.assign({}, defaultOptions, options || {}), keys = _a.keys, ignoreActions = _a.ignoreActions, hydratedStateKey = _a.hydratedStateKey, onSyncError = _a.onSyncError;
    ignoreActions.push(exports.StorageSyncActions.HYDRATED);
    ignoreActions.push('@ngrx/store/init');
    ignoreActions.push('@ngrx/effects/init');
    ignoreActions.push('@ngrx/store/update-reducers');
    var hydratedState = {};
    return function storageSyncReducer(reducer) {
        return function (state, action) {
            var type = action.type, payload = action.payload;
            if (type === exports.StorageSyncActions.HYDRATED) {
                state = Object.assign({}, state, payload);
                if (hydratedStateKey) {
                    hydratedState[hydratedStateKey] = true;
                }
            }
            var nextState = Object.assign({}, reducer(state, action), hydratedState);
            if (ignoreActions.indexOf(type) === -1) {
                saveState(nextState, keys).catch(function (err) { return onSyncError(err); });
            }
            return nextState;
        };
    };
}
exports.storageSync = storageSync;
//# sourceMappingURL=index.js.map